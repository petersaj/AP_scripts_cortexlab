function grp_data = AP_groupfun(data,grp,fun)
% grp_data = AP_grpfun(data,grp,fun)
%
% Apply function to data grouped by grouping variables
%
% data - ND array
% grp - cell array of grouping variables (oriented in the demension they
% index, e.g. Nx1 = first dim, 1x1xN = third dim)
% fun - function to apply to grouped data
%
% I made this because 1) grpstats only works with 2D arrays and 1)
% accumarray requires ND index matricies which can be ridiculously huge,
% I'm surprised there's no better built-in function to do this...

keyboard

% Check that each grouping variable is only 1D
grp_isvec = cellfun(@(x) isvector(squeeze(x)),grp);
if ~all(grp_isvec)
    error('Not all groups are vectors');
end

% Check that the size of each grouping variable matches it's data
grp_match_datasize = cellfun(@(x) size(x,find(size(x)~=1)) == ...
    size(data,find(size(x)~=1)),grp);
if ~all(grp_match_datasize)
    error('Group vectors don''t match data size');
end

% Turn grouping variables into unique indicies
[grp_unique,~,grp_idx] = cellfun(@unique,grp,'uni',false);

grp_unique_n = cellfun(@length,grp_unique);
n_combinations = prod(cellfun(@(x) length(x),grp_unique));

x = nan(grp_unique_n,class(data));

curr_grp_sub = ones(size(grp));
for curr_comb = 1:n_combinations
    curr_data = cellfun(@(x) 

end

for curr_group = 1:length(grp)
    for curr_grp_idx = 1:grp_unique_n(grp)

    end
end



feval


