% Example pipeline for processing histology

%% 1) Load CCF and set paths for slide and slice images

% Load CCF atlas
allen_atlas_path = 'C:\Users\Andrew\OneDrive for Business\Documents\Atlases\AllenCCF';
tv = readNPY([allen_atlas_path filesep 'template_volume_10um.npy']);
av = readNPY([allen_atlas_path filesep 'annotation_volume_10um_by_index.npy']);
st = loadStructureTree([allen_atlas_path filesep 'structure_tree_safe_2017.csv']);

% Set paths for histology images and directory to save slice/alignment
im_path = 'C:\Users\Andrew\Desktop\test_histology\AP046';
slice_path = [im_path filesep 'slices'];

%% 2) Preprocess slide images to produce slice images

% Set white balance and resize slide images, extract slice images
% (Note: this resizes the images purely for file size reasons - the CCF can
% be aligned to histology no matter what the scaling. If pixel size is
% available in metadata then automatically scales to CCF resolution,
% otherwise user can specify the resize factor as a second argument)
AP_process_histology(im_path);
% AP_process_histology(im_path,resize_factor); % user-specified resize factor

% (optional) Rotate, center, pad, flip slice images
AP_rotate_histology(slice_path);

%% 3) Align CCF to slices

% Find CCF slices corresponding to each histology slice
AP_grab_histology_ccf(tv,av,st,slice_path);

% Align CCF slices and histology slices
% (first: automatically, by outline)
AP_auto_align_histology_ccf(slice_path)
% (second: curate manually)
AP_manual_align_histology_ccf(tv,av,st,slice_path);


%% 4) Utilize aligned CCF

% Display aligned CCF over histology slices
AP_view_aligned_histology(st,slice_path);

% Display histology within 3D CCF
AP_view_aligned_histology_volume(tv,av,st,slice_path,1);

% Get probe trajectory from histology, convert to CCF coordinates
AP_get_probe_histology(tv,av,st,slice_path);

% Extract slices from full-resolution images
% (not worth it at the moment, each slice is 200 MB)
% AP_grab_fullsize_histology_slices(im_path)

%% TO DO: use ephys metrics to get probe location from trajectory?
% (make this be a function with spike_templates and spike depths input)

% Load probe CCF
probe_ccf_fn = [slice_path filesep 'probe_ccf.mat'];
load(probe_ccf_fn);

% Load ephys data
animal = 'AP046'; day = '2019-10-21'; experiment = 1; verbose = true; load_parts.ephys = true; AP_load_experiment;

% Get normalized log spike n
[~,~,spike_templates_reidx] = unique(spike_templates);
norm_template_spike_n = mat2gray(log10(accumarray(spike_templates_reidx,1)+1));

% Get multiunit correlation
n_corr_groups = 40;
max_depths = 3840; % (hardcode, sometimes kilosort2 drops channels)
depth_group_edges = linspace(0,max_depths,n_corr_groups+1);
depth_group = discretize(template_depths,depth_group_edges);
depth_group_centers = depth_group_edges(1:end-1)+(diff(depth_group_edges)/2);
unique_depths = 1:length(depth_group_edges)-1;

spike_binning = 0.01; % seconds
corr_edges = nanmin(spike_times):spike_binning:nanmax(spike_times);
corr_centers = corr_edges(1:end-1) + diff(corr_edges);

binned_spikes_depth = zeros(length(unique_depths),length(corr_edges)-1);
for curr_depth = 1:length(unique_depths)
    binned_spikes_depth(curr_depth,:) = histcounts(spike_times( ...
        ismember(spike_templates,find(depth_group == unique_depths(curr_depth)))), ...
        corr_edges);
end

mua_corr = corrcoef(binned_spikes_depth');

figure; 
% Plot spike depth vs rate
subplot(1,3,1);
set(gca,'Position',[0.1,0.1,0.1,0.8]);
scatter(norm_spike_n,template_depths,15,'k','filled');
set(gca,'YDir','reverse');
ylim([0,max_depths]);

% Plot multiunit correlation
subplot(1,3,2);
set(gca,'Position',[0.3,0.1,0.3,0.8]);
imagesc(depth_group_centers,depth_group_centers,mua_corr);
caxis([0,max(mua_corr(mua_corr ~= 1))]); colormap(hot);
ylim([0,max_depths]);

% Plot probe areas (interactive)
% (load the colormap - located in the repository, find by associated fcn)
allenCCF_path = fileparts(which('allenCCFbregma'));
cmap_filename = [allenCCF_path filesep 'allen_ccf_colormap_2017.mat'];
load(cmap_filename);

curr_probe = 1;
probe_areas_ax = subplot(1,3,3);
set(probe_areas_ax,'Position',[0.6,0.1,0.3,0.8]);

trajectory_area_boundaries = ...
    [1;find(diff(probe_ccf(curr_probe).areas) ~= 0);length(probe_ccf(curr_probe).areas)];
trajectory_area_centers = (trajectory_area_boundaries(1:end-1) + diff(trajectory_area_boundaries)/2);
trajectory_area_labels = st.safe_name(probe_ccf(curr_probe).areas(round(trajectory_area_centers)));

image([],1:length(probe_ccf(curr_probe).areas)*10,probe_ccf(curr_probe).areas);
colormap(probe_areas_ax,cmap);
caxis([1,size(cmap,1)])
set(probe_areas_ax,'YTick',trajectory_area_centers*10,'YTickLabels',trajectory_area_labels);
set(probe_areas_ax,'XTick',[]);
set(probe_areas_ax,'YAxisLocation','right')

ylim([0,max_depths]);











